f_start<-as.numeric(x[2])
f_stop<-as.numeric(x[3])
matches<-unlist(apply(peaks_split[[as.numeric(x[1])]][(START>=f_start & START<=f_stop) |
(END>=f_start & END<=f_stop) |
(START<=f_start & END>=f_stop)], 1, function(y) y[3]:y[4]))
sum(f_start:f_stop %in% matches)
})
regions
peaks_split
regions
x<-unlist(regions[1])
chrom<-x[1]
f_start<-as.numeric(x[2])
f_stop<-as.numeric(x[3])
matches<-unlist(apply(peaks_split[[chrom]][(START>=f_start & START<=f_stop) |
(END>=f_start & END<=f_stop) |
(START<=f_start & END>=f_stop)], 1, function(y) y[3]:y[4]))
peaks_split[[chrom]]
peaks_split
f_start
f_stop
peaks_split[[chrom]][(START>=f_start & START<=f_stop) |
(END>=f_start & END<=f_stop) |
(START<=f_start & END>=f_stop)]
matches<-unlist(apply(peaks_split[[chrom]][(START>=f_start & START<=f_stop) |
(END>=f_start & END<=f_stop) |
(START<=f_start & END>=f_stop)], 1, function(y) y[3]:y[4]))
peaks_split
peaks_split<-split(peaks, by="CHR")
peaks_split[]<-lapply(peaks_split, function(x) unlist(apply(x,1, function(y) y[3]:y[4])))
sum(f_start:f_stop %in% (peaks_split[[chrom]])
})
sum(f_start:f_stop %in% peaks_split[[chrom]])
atac<-apply(regions, 1, function(x) {
chrom<-x[1]
f_start<-as.numeric(x[2])
f_stop<-as.numeric(x[3])
sum(f_start:f_stop %in% peaks_split[[chrom]])
})
atac
gff$atac[1:100]
regions$atac<-atac
regions$atac_pct<-regions$atac/regions$length
# add methylation data ----------------------------------------------------
cat("Extracting C_methylatiton data...")
meth<-fread(meth_file)
colnames(meth)<-c("chr","start","stop","direction","meth","unmeth","type","seq")
meth$chr<-gsub("Chr","",meth$chr) ##CHROM NAME FORMATTING##
meth_split<-split(meth, by=c("chr"))
meth_split<-lapply(meth_split, function(x) split(x, by="type"))
CG<-apply(regions, 1, function(x) {
f_start<-as.numeric(x[2])
f_stop<-as.numeric(x[3])
sum<-nrow(meth_split[[as.character(x[1])]][["CG"]][pos>=f_start & pos<=f_stop])
})
meth_split
meth_split$`5`$CG$stop-meth_split$`5`$CG$start
CG<-apply(regions, 1, function(x) {
chrom<-as.character(x[1])
f_start<-as.numeric(x[2])
f_stop<-as.numeric(x[3])
sum<-nrow(meth_split[[chrom]][["CG"]][start>=f_start & start<=f_stop])
})
C
CHG<-apply(regions, 1, function(x) {
chrom<-as.character(x[1])
f_start<-as.numeric(x[2])
f_stop<-as.numeric(x[3])
sum<-nrow(meth_split[[chrom]][["CHG"]][pos>=f_start & pos<=f_stop])
})
CHG<-apply(regions, 1, function(x) {
chrom<-as.character(x[1])
f_start<-as.numeric(x[2])
f_stop<-as.numeric(x[3])
sum<-nrow(meth_split[[chrom]][["CHG"]][start>=f_start & start<=f_stop])
})
CHH<-apply(regions, 1, function(x) {
chrom<-as.character(x[1])
f_start<-as.numeric(x[2])
f_stop<-as.numeric(x[3])
sum<-nrow(meth_split[[chrom]][["CHH"]][start>=f_start & start<=f_stop])
})
regions$CG<-CG
regions$CHG<-CHG
regions$CHH<-CHH
regions$CG_pct<-regions$CG/regions$length
regions$CHG_pct<-regions$CHG/regions$length
regions$CHH_pct<-regions$CHH/regions$length
# add ATACseq data ----------------------------------------------------
cat("Extracting CG content...")
genome<-read.fasta(genome_file)
GC_content<-apply(regions, 1, function(x) {
f_start<-as.numeric(x[2])
f_stop<-as.numeric(x[3])
seq<-(genome[[as.character(x[1])]][f_start:f_stop])
return(sum(grepl("c|g", seq)))
})
regions$GC_content<-GC_content
regions$GC_content_pct<-regions$GC_content/regions$length
extract_epigenome<-function(regions, peaks_file){
if(!all(colnames(regions)[1:3] == c("chr","start","stop" ))){
stop('First 3 column names of regions must be "chr","start","stop"')
}
if(typeof(regions$chr)!="character"){
stop('regions$chr should be of type character')
}
if(!file.exists(tmp_dir)){
stop('tmp_dir provided does not exist.')
}
if(!file.exists(peaks_file)){
stop('peaks_file dprovided oes not exist.')
}
if(!file.exists(meth_file)){
stop('meth_file provided does not exist.')
}
if(!file.exists(genome_file)){
stop('genome_file provided does not exist.')
}
if(!file.exists(histone_dir)){
stop('histone_dir provided does not exist.')
}
if(!file.exists(multiBigwigSummary)){
stop('multiBigwigSummary provided does not exist.')
}
cat("It is always recommended to check your data files to see the formatting of the chromosome names. You may need to modify the code in this function (lines where you see ##CHROM NAME FORMATTING##) to make all chromosome names in the same format for it to work properly and avoid esoteric errors...")
cat("Reading reference genome")
genome<-read.fasta(genome_file)
chr_lengths<-lapply(genome, length)
ingenome<-apply(regions, 1, function(x){
chr=as.character(x[1])
stop=as.numeric(3)
stop<chr_lengths[chr]
})
if(!all(ingenome)){
stop("regions outside bounds of reference genome provided")
}
regions$length<-regions$stop-regions$start+1
# add histone marks  ------------------------------------------------------
cat("Extracting histone marks...")
tmp_bed<-data.table(paste0("chr", regions$chr), regions$start, regions$stop) ##CHROM NAME FORMATTING##
tmp_bed$V2<-as.integer(tmp_bed$V2)
tmp_bed$V3<-as.integer(tmp_bed$V3)
cat(paste0("writing ", tmp_dir, "/tmp_bed.bed"))
write.table(tmp_bed, paste0(tmp_dir, "/tmp_bed.bed"), row.names = F, col.names = F, quote = F, sep="\t")
cat("using files with ^H3K.+.bw format...")
histone_files<-list.files(histone_dir, pattern = "^H3K.+.bw")
for (f in histone_files){
cat("\n", f,"...")
system(paste0(multiBigwigSummary, " BED-file -b ", histone_dir,f, " --outRawCounts ", tmp_dir,f,".tab -o ",tmp_dir ,f,".sum --BED ",tmp_dir, "tmp_bed.bed"))
}
for(f in histone_files){
bwdata<-fread(paste0(tmp_dir,f,".tab"))
colnames(bwdata)<-c("chr", "start","stop",f)
bwdata$chr<-as.character(gsub("chr","",bwdata$chr))
bwdata<-unique(bwdata)
regions<-merge(regions, bwdata, all.x=T,all.y=F, by=c("chr","start","stop"))
}
# add ATACseq data ----------------------------------------------------
cat("Extracting ATACseq peaks...")
peaks<-fread(peaks_file)
peaks$CHR<-gsub("Chr","",peaks$CHR) ##CHROM NAME FORMATTING##
peaks_split<-split(peaks, by="CHR")
peaks_split[]<-lapply(peaks_split, function(x) unlist(apply(x,1, function(y) y[3]:y[4])))
atac<-apply(regions, 1, function(x) {
chrom<-x[1]
f_start<-as.numeric(x[2])
f_stop<-as.numeric(x[3])
sum(f_start:f_stop %in% peaks_split[[chrom]])
})
regions$atac<-atac
regions$atac_pct<-regions$atac/regions$length
# add methylation data ----------------------------------------------------
cat("Extracting C_methylatiton data...")
meth<-fread(meth_file)
colnames(meth)<-c("chr","start","stop","direction","meth","unmeth","type","seq")
meth$chr<-gsub("Chr","",meth$chr) ##CHROM NAME FORMATTING##
meth_split<-split(meth, by=c("chr"))
meth_split<-lapply(meth_split, function(x) split(x, by="type"))
CG<-apply(regions, 1, function(x) {
chrom<-as.character(x[1])
f_start<-as.numeric(x[2])
f_stop<-as.numeric(x[3])
sum<-nrow(meth_split[[chrom]][["CG"]][start>=f_start & start<=f_stop])
})
CHG<-apply(regions, 1, function(x) {
chrom<-as.character(x[1])
f_start<-as.numeric(x[2])
f_stop<-as.numeric(x[3])
sum<-nrow(meth_split[[chrom]][["CHG"]][start>=f_start & start<=f_stop])
})
CHH<-apply(regions, 1, function(x) {
chrom<-as.character(x[1])
f_start<-as.numeric(x[2])
f_stop<-as.numeric(x[3])
sum<-nrow(meth_split[[chrom]][["CHH"]][start>=f_start & start<=f_stop])
})
regions$CG<-CG
regions$CHG<-CHG
regions$CHH<-CHH
regions$CG_pct<-regions$CG/regions$length
regions$CHG_pct<-regions$CHG/regions$length
regions$CHH_pct<-regions$CHH/regions$length
# add GC content data ----------------------------------------------------
cat("Extracting CG content...")
genome<-read.fasta(genome_file)
GC_content<-apply(regions, 1, function(x) {
f_start<-as.numeric(x[2])
f_stop<-as.numeric(x[3])
seq<-(genome[[as.character(x[1])]][f_start:f_stop])
return(sum(grepl("c|g", seq)))
})
regions$GC_content<-GC_content
regions$GC_content_pct<-regions$GC_content/regions$length
}
out<-extract_epigenome(
peaks_file="~/Dropbox/Research/Collaborations/Thanvi/mutationrate/data/raw/ATAC-seq MACS2 peaks/Col0_Consensus_NormalisedReadCounts_DiffBind.csv",
meth_file="~/Dropbox/Research/Collaborations/Thanvi/mutationrate/data/derived/CytosineMethylation/Col0_WT_onlymC.bed",
genome_file="~/Downloads/TAIR10_chr_all.fas",
tmp_dir="~/Desktop/tmp/",
histone_dir="~/Dropbox/Research/Collaborations/Thanvi/mutationrate/data/raw/pcsd/",
multiBigwigSummary="/Users/greymonroe/opt/miniconda2/bin/multiBigwigSummary",
regions<-data.table(chr=as.character(gff$chr[1:100]), start=gff$start[1:100], stop=gff$stop[1:100])
)
extract_epigenome<-function(regions, peaks_file, meth_file, genome_file, histone_dir, tmp_dir, multiBigwigSummary){
if(!all(colnames(regions)[1:3] == c("chr","start","stop" ))){
stop('First 3 column names of regions must be "chr","start","stop"')
}
if(typeof(regions$chr)!="character"){
stop('regions$chr should be of type character')
}
if(!file.exists(tmp_dir)){
stop('tmp_dir provided does not exist.')
}
if(!file.exists(peaks_file)){
stop('peaks_file dprovided oes not exist.')
}
if(!file.exists(meth_file)){
stop('meth_file provided does not exist.')
}
if(!file.exists(genome_file)){
stop('genome_file provided does not exist.')
}
if(!file.exists(histone_dir)){
stop('histone_dir provided does not exist.')
}
if(!file.exists(multiBigwigSummary)){
stop('multiBigwigSummary provided does not exist.')
}
cat("It is always recommended to check your data files to see the formatting of the chromosome names. You may need to modify the code in this function (lines where you see ##CHROM NAME FORMATTING##) to make all chromosome names in the same format for it to work properly and avoid esoteric errors...")
cat("Reading reference genome")
genome<-read.fasta(genome_file)
chr_lengths<-lapply(genome, length)
ingenome<-apply(regions, 1, function(x){
chr=as.character(x[1])
stop=as.numeric(3)
stop<chr_lengths[chr]
})
if(!all(ingenome)){
stop("regions outside bounds of reference genome provided")
}
regions$length<-regions$stop-regions$start+1
# add histone marks  ------------------------------------------------------
cat("Extracting histone marks...")
tmp_bed<-data.table(paste0("chr", regions$chr), regions$start, regions$stop) ##CHROM NAME FORMATTING##
tmp_bed$V2<-as.integer(tmp_bed$V2)
tmp_bed$V3<-as.integer(tmp_bed$V3)
cat(paste0("writing ", tmp_dir, "/tmp_bed.bed"))
write.table(tmp_bed, paste0(tmp_dir, "/tmp_bed.bed"), row.names = F, col.names = F, quote = F, sep="\t")
cat("using files with ^H3K.+.bw format...")
histone_files<-list.files(histone_dir, pattern = "^H3K.+.bw")
for (f in histone_files){
cat("\n", f,"...")
system(paste0(multiBigwigSummary, " BED-file -b ", histone_dir,f, " --outRawCounts ", tmp_dir,f,".tab -o ",tmp_dir ,f,".sum --BED ",tmp_dir, "tmp_bed.bed"))
}
for(f in histone_files){
bwdata<-fread(paste0(tmp_dir,f,".tab"))
colnames(bwdata)<-c("chr", "start","stop",f)
bwdata$chr<-as.character(gsub("chr","",bwdata$chr))
bwdata<-unique(bwdata)
regions<-merge(regions, bwdata, all.x=T,all.y=F, by=c("chr","start","stop"))
}
# add ATACseq data ----------------------------------------------------
cat("Extracting ATACseq peaks...")
peaks<-fread(peaks_file)
peaks$CHR<-gsub("Chr","",peaks$CHR) ##CHROM NAME FORMATTING##
peaks_split<-split(peaks, by="CHR")
peaks_split[]<-lapply(peaks_split, function(x) unlist(apply(x,1, function(y) y[3]:y[4])))
atac<-apply(regions, 1, function(x) {
chrom<-x[1]
f_start<-as.numeric(x[2])
f_stop<-as.numeric(x[3])
sum(f_start:f_stop %in% peaks_split[[chrom]])
})
regions$atac<-atac
regions$atac_pct<-regions$atac/regions$length
# add methylation data ----------------------------------------------------
cat("Extracting C_methylatiton data...")
meth<-fread(meth_file)
colnames(meth)<-c("chr","start","stop","direction","meth","unmeth","type","seq")
meth$chr<-gsub("Chr","",meth$chr) ##CHROM NAME FORMATTING##
meth_split<-split(meth, by=c("chr"))
meth_split<-lapply(meth_split, function(x) split(x, by="type"))
CG<-apply(regions, 1, function(x) {
chrom<-as.character(x[1])
f_start<-as.numeric(x[2])
f_stop<-as.numeric(x[3])
sum<-nrow(meth_split[[chrom]][["CG"]][start>=f_start & start<=f_stop])
})
CHG<-apply(regions, 1, function(x) {
chrom<-as.character(x[1])
f_start<-as.numeric(x[2])
f_stop<-as.numeric(x[3])
sum<-nrow(meth_split[[chrom]][["CHG"]][start>=f_start & start<=f_stop])
})
CHH<-apply(regions, 1, function(x) {
chrom<-as.character(x[1])
f_start<-as.numeric(x[2])
f_stop<-as.numeric(x[3])
sum<-nrow(meth_split[[chrom]][["CHH"]][start>=f_start & start<=f_stop])
})
regions$CG<-CG
regions$CHG<-CHG
regions$CHH<-CHH
regions$CG_pct<-regions$CG/regions$length
regions$CHG_pct<-regions$CHG/regions$length
regions$CHH_pct<-regions$CHH/regions$length
# add GC content data ----------------------------------------------------
cat("Extracting CG content...")
genome<-read.fasta(genome_file)
GC_content<-apply(regions, 1, function(x) {
f_start<-as.numeric(x[2])
f_stop<-as.numeric(x[3])
seq<-(genome[[as.character(x[1])]][f_start:f_stop])
return(sum(grepl("c|g", seq)))
})
regions$GC_content<-GC_content
regions$GC_content_pct<-regions$GC_content/regions$length
}
out<-extract_epigenome(
peaks_file="~/Dropbox/Research/Collaborations/Thanvi/mutationrate/data/raw/ATAC-seq MACS2 peaks/Col0_Consensus_NormalisedReadCounts_DiffBind.csv",
meth_file="~/Dropbox/Research/Collaborations/Thanvi/mutationrate/data/derived/CytosineMethylation/Col0_WT_onlymC.bed",
genome_file="~/Downloads/TAIR10_chr_all.fas",
tmp_dir="~/Desktop/tmp/",
histone_dir="~/Dropbox/Research/Collaborations/Thanvi/mutationrate/data/raw/pcsd/",
multiBigwigSummary="/Users/greymonroe/opt/miniconda2/bin/multiBigwigSummary",
regions<-data.table(chr=as.character(gff$chr[1:100]), start=gff$start[1:100], stop=gff$stop[1:100])
)
out
return(regions)
return(regions)
extract_epigenome<-function(regions, peaks_file, meth_file, genome_file, histone_dir, tmp_dir, multiBigwigSummary){
if(!all(colnames(regions)[1:3] == c("chr","start","stop" ))){
stop('First 3 column names of regions must be "chr","start","stop"')
}
if(typeof(regions$chr)!="character"){
stop('regions$chr should be of type character')
}
if(!file.exists(tmp_dir)){
stop('tmp_dir provided does not exist.')
}
if(!file.exists(peaks_file)){
stop('peaks_file dprovided oes not exist.')
}
if(!file.exists(meth_file)){
stop('meth_file provided does not exist.')
}
if(!file.exists(genome_file)){
stop('genome_file provided does not exist.')
}
if(!file.exists(histone_dir)){
stop('histone_dir provided does not exist.')
}
if(!file.exists(multiBigwigSummary)){
stop('multiBigwigSummary provided does not exist.')
}
cat("It is always recommended to check your data files to see the formatting of the chromosome names. You may need to modify the code in this function (lines where you see ##CHROM NAME FORMATTING##) to make all chromosome names in the same format for it to work properly and avoid esoteric errors...")
cat("Reading reference genome")
genome<-read.fasta(genome_file)
chr_lengths<-lapply(genome, length)
ingenome<-apply(regions, 1, function(x){
chr=as.character(x[1])
stop=as.numeric(3)
stop<chr_lengths[chr]
})
if(!all(ingenome)){
stop("regions outside bounds of reference genome provided")
}
regions$length<-regions$stop-regions$start+1
# add histone marks  ------------------------------------------------------
cat("Extracting histone marks...")
tmp_bed<-data.table(paste0("chr", regions$chr), regions$start, regions$stop) ##CHROM NAME FORMATTING##
tmp_bed$V2<-as.integer(tmp_bed$V2)
tmp_bed$V3<-as.integer(tmp_bed$V3)
cat(paste0("writing ", tmp_dir, "/tmp_bed.bed"))
write.table(tmp_bed, paste0(tmp_dir, "/tmp_bed.bed"), row.names = F, col.names = F, quote = F, sep="\t")
cat("using files with ^H3K.+.bw format...")
histone_files<-list.files(histone_dir, pattern = "^H3K.+.bw")
for (f in histone_files){
cat("\n", f,"...")
system(paste0(multiBigwigSummary, " BED-file -b ", histone_dir,f, " --outRawCounts ", tmp_dir,f,".tab -o ",tmp_dir ,f,".sum --BED ",tmp_dir, "tmp_bed.bed"))
}
for(f in histone_files){
bwdata<-fread(paste0(tmp_dir,f,".tab"))
colnames(bwdata)<-c("chr", "start","stop",f)
bwdata$chr<-as.character(gsub("chr","",bwdata$chr))
bwdata<-unique(bwdata)
regions<-merge(regions, bwdata, all.x=T,all.y=F, by=c("chr","start","stop"))
}
# add ATACseq data ----------------------------------------------------
cat("Extracting ATACseq peaks...")
peaks<-fread(peaks_file)
peaks$CHR<-gsub("Chr","",peaks$CHR) ##CHROM NAME FORMATTING##
peaks_split<-split(peaks, by="CHR")
peaks_split[]<-lapply(peaks_split, function(x) unlist(apply(x,1, function(y) y[3]:y[4])))
atac<-apply(regions, 1, function(x) {
chrom<-x[1]
f_start<-as.numeric(x[2])
f_stop<-as.numeric(x[3])
sum(f_start:f_stop %in% peaks_split[[chrom]])
})
regions$atac<-atac
regions$atac_pct<-regions$atac/regions$length
# add methylation data ----------------------------------------------------
cat("Extracting C_methylatiton data...")
meth<-fread(meth_file)
colnames(meth)<-c("chr","start","stop","direction","meth","unmeth","type","seq")
meth$chr<-gsub("Chr","",meth$chr) ##CHROM NAME FORMATTING##
meth_split<-split(meth, by=c("chr"))
meth_split<-lapply(meth_split, function(x) split(x, by="type"))
CG<-apply(regions, 1, function(x) {
chrom<-as.character(x[1])
f_start<-as.numeric(x[2])
f_stop<-as.numeric(x[3])
sum<-nrow(meth_split[[chrom]][["CG"]][start>=f_start & start<=f_stop])
})
CHG<-apply(regions, 1, function(x) {
chrom<-as.character(x[1])
f_start<-as.numeric(x[2])
f_stop<-as.numeric(x[3])
sum<-nrow(meth_split[[chrom]][["CHG"]][start>=f_start & start<=f_stop])
})
CHH<-apply(regions, 1, function(x) {
chrom<-as.character(x[1])
f_start<-as.numeric(x[2])
f_stop<-as.numeric(x[3])
sum<-nrow(meth_split[[chrom]][["CHH"]][start>=f_start & start<=f_stop])
})
regions$CG<-CG
regions$CHG<-CHG
regions$CHH<-CHH
regions$CG_pct<-regions$CG/regions$length
regions$CHG_pct<-regions$CHG/regions$length
regions$CHH_pct<-regions$CHH/regions$length
# add GC content data ----------------------------------------------------
cat("Extracting CG content...")
genome<-read.fasta(genome_file)
GC_content<-apply(regions, 1, function(x) {
f_start<-as.numeric(x[2])
f_stop<-as.numeric(x[3])
seq<-(genome[[as.character(x[1])]][f_start:f_stop])
return(sum(grepl("c|g", seq)))
})
regions$GC_content<-GC_content
regions$GC_content_pct<-regions$GC_content/regions$length
return(regions)
}
out<-extract_epigenome(
peaks_file="~/Dropbox/Research/Collaborations/Thanvi/mutationrate/data/raw/ATAC-seq MACS2 peaks/Col0_Consensus_NormalisedReadCounts_DiffBind.csv",
meth_file="~/Dropbox/Research/Collaborations/Thanvi/mutationrate/data/derived/CytosineMethylation/Col0_WT_onlymC.bed",
genome_file="~/Downloads/TAIR10_chr_all.fas",
tmp_dir="~/Desktop/tmp/",
histone_dir="~/Dropbox/Research/Collaborations/Thanvi/mutationrate/data/raw/pcsd/",
multiBigwigSummary="/Users/greymonroe/opt/miniconda2/bin/multiBigwigSummary",
regions<-data.table(chr=as.character(gff$chr[1:100]), start=gff$start[1:100], stop=gff$stop[1:100])
)
document()
rm(list = c("extract_epigenome"))
document()
document()
source("~/code/polymorphology/R/gff_counts.R")
document()
document()
rm(list = c("region_counts"))
document()
install("../polymorphology")
library(polymorphology)
install("../polymorphology")
install("../polymorphology")
install("../polymorphology")
install("../polymorphology")
library(devtools)
install("../polymorphology")
document()
document()
130000000*2.7e-7
genome
genome
library(devtools)
document()
document()
install("../polymorphology")
document()
install("../polymorphology")
install("../polymorphology")
library(devtools)
document()
library(devtools)
document()
uninstall("../polymorphology")
install("../polymorphology")
document()
document()
